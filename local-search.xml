<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQLite实现分割字符串</title>
    <link href="/2024/11/18/sqlite-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/11/18/sqlite-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="SQLite-官方递归示例"><a href="#SQLite-官方递归示例" class="headerlink" title="SQLite 官方递归示例"></a>SQLite 官方递归示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">with</span> <span class="hljs-keyword">recursive</span><br>    cnt (x) <span class="hljs-keyword">as</span> (<br>        <span class="hljs-keyword">select</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br>        <span class="hljs-keyword">select</span> x<span class="hljs-operator">+</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">from</span> cnt<br>        limit <span class="hljs-number">10000</span><br>    )<br><span class="hljs-keyword">select</span> x <span class="hljs-keyword">from</span> cnt;<br></code></pre></td></tr></table></figure><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> COMPANY;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> COMPANY(<br>    ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    NAME           TEXT    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> COMPANY (ID, NAME)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Paul,Allen&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> COMPANY (ID, NAME)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Teddy,Mark,David&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> COMPANY (ID, NAME)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Kim&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="使用递归实现分割字符串"><a href="#使用递归实现分割字符串" class="headerlink" title="使用递归实现分割字符串"></a>使用递归实现分割字符串</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">with</span> <span class="hljs-keyword">recursive</span><br>    split (<br>        ID,<br>        NAME_splited,<br>        NAME<br>    ) <span class="hljs-keyword">as</span> (<br>        <span class="hljs-keyword">select</span><br>            ID,<br>            <span class="hljs-string">&#x27;&#x27;</span>,<br>            NAME<br>        <span class="hljs-keyword">from</span> COMPANY<br>        <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br>        <span class="hljs-keyword">select</span><br>            ID,<br>            substr(NAME, <span class="hljs-number">1</span>, <span class="hljs-keyword">case</span> instr(NAME, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">when</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> length(NAME) <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> instr(NAME, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">end</span> <span class="hljs-operator">-</span> <span class="hljs-number">1</span>),<br>            substr(NAME, <span class="hljs-keyword">case</span> instr(NAME, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">when</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> length(NAME) <span class="hljs-keyword">else</span> instr(NAME, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">end</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">from</span> split<br>        <span class="hljs-keyword">where</span> NAME <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;&#x27;</span><br>    )<br><span class="hljs-keyword">select</span><br>    ID,<br>    NAME_splited<br><span class="hljs-keyword">from</span> split<br><span class="hljs-keyword">where</span> NAME_splited <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ID<br>;<br></code></pre></td></tr></table></figure><p>结果</p><table><thead><tr><th>ID</th><th>NAME_splited</th></tr></thead><tbody><tr><td>1</td><td>Paul</td></tr><tr><td>1</td><td>Allen</td></tr><tr><td>2</td><td>Teddy</td></tr><tr><td>2</td><td>Mark</td></tr><tr><td>2</td><td>David</td></tr><tr><td>3</td><td>Kim</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SQLite</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ I/O流输入数字以逗号间隔/常规输入</title>
    <link href="/2024/10/16/C-I-O%E6%B5%81%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%97%E4%BB%A5%E9%80%97%E5%8F%B7%E9%97%B4%E9%9A%94-%E5%B8%B8%E8%A7%84%E8%BE%93%E5%85%A5/"/>
    <url>/2024/10/16/C-I-O%E6%B5%81%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%97%E4%BB%A5%E9%80%97%E5%8F%B7%E9%97%B4%E9%9A%94-%E5%B8%B8%E8%A7%84%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="逗号间隔输入"><a href="#逗号间隔输入" class="headerlink" title="逗号间隔输入"></a>逗号间隔输入</h3><p>输入格式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1,2,34,567<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1, 2, 34, 567<br></code></pre></td></tr></table></figure><p>使用 cin 根据数据的类型以及分隔符自动对数据进行输入。使用 cin.get() 读取分隔符并舍弃</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        cin &gt;&gt; temp;<br>        res.<span class="hljs-built_in">push_back</span>(temp);<br>        <span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : res)<br>        cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot;   &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常规输入"><a href="#常规输入" class="headerlink" title="常规输入"></a>常规输入</h3><p>输入格式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">2<br>2<br>1 2<br>3<br>0 2 3<br></code></pre></td></tr></table></figure><p>第一行为数列行数，第二行为数列中元素的个数，第三行为各元素的值，依次类推</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> length;<br>        cin &gt;&gt; length;<br>        vector&lt;<span class="hljs-type">int</span>&gt; line;<br>        <span class="hljs-type">int</span> temp;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            cin &gt;&gt; temp;<br>            line.<span class="hljs-built_in">push_back</span>(temp);<br>            <span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(line);<br>        line.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置http(80)自动跳转到https(443)</title>
    <link href="/2024/10/08/nginx%E9%85%8D%E7%BD%AEhttp-80-%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0https-443/"/>
    <url>/2024/10/08/nginx%E9%85%8D%E7%BD%AEhttp-80-%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0https-443/</url>
    
    <content type="html"><![CDATA[<p>nginx配置http(80)自动跳转到https(443)分两种情况，一是，单个域名80端口重定向到443端口，二是，泛域名的80端口重定向到443端口，如何启用https访问可参考网址：针对这两种情况分别进行介绍。</p><h3 id="1-单域名配置"><a href="#1-单域名配置" class="headerlink" title="1. 单域名配置"></a>1. 单域名配置</h3><p>将访问单域名 <a href="http://www.example.com/">www.example.com</a> 的80端口重定向到443端口，只需在80端口配置中增加一条跳转命令：<code>rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;</code> 即可实现访问单域名http自动跳转到https的功能，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.example.com;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)$</span> https://<span class="hljs-variable">$&#123;server_name&#125;</span><span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>; <span class="hljs-comment">#增加内容</span><br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span> www.example.com; <br><br>    <span class="hljs-attribute">ssl_certificate</span>    /opt/cert/www.example.com.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span>   /opt/cert/www.example.com.key;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;  <br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000&quot;</span>;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   http://127.0.0.1:8080;<br>        <span class="hljs-attribute">proxy_set_header</span>   Host      <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span>   X-Real-IP   <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For   <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-泛域名配置"><a href="#2-泛域名配置" class="headerlink" title="2. 泛域名配置"></a>2. 泛域名配置</h3><p>将访问泛域名*.example.com的80端口重定向到443端口，只需在80端口配置中增加一条跳转命令：<code>return 301 https://$http_host$request_uri;</code> 即可实现泛域名http自动跳转到https的功能，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> <span class="hljs-regexp">*.example.com</span>;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$http_host</span><span class="hljs-variable">$request_uri</span>; <span class="hljs-comment">#增加内容</span><br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span> <span class="hljs-regexp">*.example.com</span>; <br><br>    <span class="hljs-attribute">ssl_certificate</span>    /opt/cert/www.example.com.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span>   /opt/cert/www.example.com.key;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;  <br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000&quot;</span>;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   http://127.0.0.1:8080;<br>        <span class="hljs-attribute">proxy_set_header</span>   Host      <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span>   X-Real-IP   <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For   <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -t<br></code></pre></td></tr></table></figure><h3 id="重启nginx服务"><a href="#重启nginx服务" class="headerlink" title="重启nginx服务"></a>重启nginx服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service restart nginx<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>文章作者： 阳光•雨<br>本文链接： <a href="https://www.liuwg.com/archives/nginxautohttps">https://www.liuwg.com/archives/nginxautohttps</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《非暴力沟通》附录</title>
    <link href="/2024/09/19/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E9%99%84%E5%BD%95/"/>
    <url>/2024/09/19/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E9%99%84%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="诚实地表达自己，而不批评、指责"><a href="#诚实地表达自己，而不批评、指责" class="headerlink" title="诚实地表达自己，而不批评、指责"></a>诚实地表达自己，而不批评、指责</h3><ol><li><p>观察<br>我所观察（看、听、回忆、想）到的有助于（或无助于）我的福祉的具体行为：<br>“当我（看、听、想到我看到的、听到的）……”</p></li><li><p>感受<br>对于这些行为，我有什么养的感受（情感而非思想）：<br>“我感到……”</p></li><li><p>需要<br>什么样的需要或价值（而非偏好或某种具体的行为）导致我那样的感受：<br>“因为我需要&#x2F;看重……”</p></li><li><p>请求<br>清楚地请求（而非命令）那些能丰富我生命的具体行为：<br>“你是否愿意？”</p></li></ol><h3 id="关切地倾听他人，而不解读为批评或指责"><a href="#关切地倾听他人，而不解读为批评或指责" class="headerlink" title="关切地倾听他人，而不解读为批评或指责"></a>关切地倾听他人，而不解读为批评或指责</h3><ol><li><p>观察<br>你所观察（看、听、回忆、想）到的有助于（或无助于）你的福祉的具体行为：<br>“当你（看、听、想到你看到的&#x2F;听到的）……”</p></li><li><p>感受<br>对于这些行为，你有什么样的感受（是情感而非思想）：<br>“你感到……吗？”</p></li><li><p>需要<br>什么样的需要或价值（而非偏好或某种具体的行为）导致你那样的感受：<br>“因为你需要&#x2F;看重……”</p></li><li><p>请求<br>关切地倾听那些能丰富你生命的具体请求，而不解读为命令：<br>“所以，你想……”</p></li></ol><div class="note note-warning">            <p>文章作者: 马歇尔·卢森堡</p>          </div>]]></content>
    
    
    <categories>
      
      <category>psychology</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
